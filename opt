{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import IsolationForest\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.svm import SVR\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "import time\n",
    "plt.style.use('seaborn-notebook')\n",
    "%matplotlib inline\n",
    "\n",
    "# JUST TO MAKE SURE SOME WARNINGS ARE IGNORED \n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from logging import getLogger\n",
    "\n",
    "logger = getLogger(__name__)\n",
    "\n",
    "\n",
    "class DECore(object):\n",
    "    \"\"\"\n",
    "    Core Class of Differential Evolution\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self,\n",
    "                 objective_function: callable,\n",
    "                 ndim: int,\n",
    "                 lower_limit: np.ndarray,\n",
    "                 upper_limit: np.ndarray,\n",
    "                 minimize: bool = True):\n",
    "\n",
    "        \"\"\"\n",
    "        :param objective_function: f(x) callable function\n",
    "        :param ndim: dimension of x\n",
    "        :param lower_limit: lower limit of search space 1d-array\n",
    "        :param upper_limit: upper limit of search space 1d-array\n",
    "        :param minimize: minimize flag. if the problem is minimization, then set True.\n",
    "                                        otherwise set False and turning as maximization.\n",
    "        \"\"\"\n",
    "        self._of = objective_function\n",
    "        self._pop = None\n",
    "        self._nd = ndim\n",
    "        self._x_current = None\n",
    "        self._low_lim = lower_limit\n",
    "        self._up_lim = upper_limit\n",
    "        self._f_current = None\n",
    "        self._is_minimize = minimize\n",
    "        self._orbit = None\n",
    "\n",
    "    def initialization(self, x_init=None):\n",
    "        \"\"\"\n",
    "        :param x_init: initial value of x (optional)\n",
    "        :return:\n",
    "        \"\"\"\n",
    "        # initialize x\n",
    "        if x_init:\n",
    "            self._x_current = x_init\n",
    "        else:\n",
    "            self._x_current = np.random.rand(self._pop, self._nd) * (self._up_lim - self._low_lim) + self._low_lim\n",
    "\n",
    "        # initialize orbit\n",
    "        self._orbit = []\n",
    "\n",
    "    def _selection(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    def _mutation(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    def _crossover(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    def _mutation_crossover(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    def _evaluate_with_check(self, x):\n",
    "        if np.any(x < self._low_lim) or np.any(x > self._up_lim):\n",
    "            return np.inf if self._is_minimize else -np.inf\n",
    "        else:\n",
    "            try:\n",
    "                f = self._of(x)\n",
    "            except Exception as ex:\n",
    "                logger.error(ex)\n",
    "                f = np.inf if self._is_minimize else -np.inf\n",
    "            return f\n",
    "\n",
    "    def _evaluate(self, params):\n",
    "        current, u = params\n",
    "        return current, self._evaluate_with_check(u)\n",
    "\n",
    "    def optimize_mp(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    def optimize(self, **kwargs):\n",
    "\n",
    "        pass\n",
    "\n",
    "    @property\n",
    "    def orbit(self):\n",
    "        return self._orbit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from concurrent import futures\n",
    "from logging import getLogger\n",
    "\n",
    "logger = getLogger(__name__)\n",
    "\n",
    "\n",
    "class DE(DECore):\n",
    "    \"\"\"\n",
    "    Differential Evolution\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self,\n",
    "                 objective_function: callable,\n",
    "                 ndim: int,\n",
    "                 lower_limit: np.ndarray,\n",
    "                 upper_limit: np.ndarray,\n",
    "                 minimize: bool = True):\n",
    "        \"\"\"\n",
    "        :param objective_function: f(x) callable function\n",
    "        :param ndim: dimension of x\n",
    "        :param lower_limit: lower limit of search space 1d-array\n",
    "        :param upper_limit: upper limit of search space 1d-array\n",
    "        :param minimize: minimize flag. if the problem is minimization, then set True.\n",
    "                                        otherwise set False and turning as maximization.\n",
    "        \"\"\"\n",
    "\n",
    "        super(DE, self).__init__(objective_function=objective_function,\n",
    "                                 ndim=ndim,\n",
    "                                 lower_limit=lower_limit,\n",
    "                                 upper_limit=upper_limit,\n",
    "                                 minimize=minimize)\n",
    "\n",
    "    def _selection(self, p, u):\n",
    "        \"\"\"\n",
    "        :param p: current index\n",
    "        :param u: trial vectors\n",
    "        :return:\n",
    "        \"\"\"\n",
    "\n",
    "        fu = self._evaluate_with_check(u)\n",
    "\n",
    "        # score is better than current\n",
    "        q1 = fu <= self._f_current[p] if self._is_minimize else fu >= self._f_current[p]\n",
    "        # over lower limit\n",
    "        q2 = np.any(u < self._low_lim)\n",
    "        # over upper limit\n",
    "        q3 = np.any(u > self._up_lim)\n",
    "        # q1 ^ ~q2 ^ ~q3\n",
    "        q = q1 * ~q2 * ~q3\n",
    "\n",
    "        f_p1 = fu if q else self._f_current[p]\n",
    "        x_p1 = u if q else self._x_current[p]\n",
    "        return p, f_p1, x_p1\n",
    "\n",
    "    def _mutation(self, current, mutant, num, sf):\n",
    "        \"\"\"\n",
    "        :param current: current index of population\n",
    "        :param mutant: mutation method\n",
    "        :param num: number of mutant vectors\n",
    "        :param sf: scaling factor\n",
    "        :return:\n",
    "        \"\"\"\n",
    "\n",
    "        assert num > 0, \"'num' must be greater than 0.\"\n",
    "\n",
    "        # mutant vector\n",
    "        # best\n",
    "        if mutant == 'best':\n",
    "            r_best = np.argmin(self._f_current) if self._is_minimize else np.argmax(self._f_current)\n",
    "            r = [r_best]\n",
    "            r += np.random.choice([n for n in range(self._pop) if n != r_best], 2 * num, replace=False).tolist()\n",
    "            v = self._x_current[r[0]] \\\n",
    "                + sf * np.sum([self._x_current[r[m + 1]] - self._x_current[r[m + 2]] for m in range(num)], axis=0)\n",
    "\n",
    "        # rand\n",
    "        elif mutant == 'rand':\n",
    "            r = np.random.choice(range(self._pop), 2 * num + 1, replace=False).tolist()\n",
    "            v = self._x_current[r[0]] \\\n",
    "                + sf * np.sum([self._x_current[r[m + 1]] - self._x_current[r[m + 2]] for m in range(num)], axis=0)\n",
    "\n",
    "        # current-to-rand\n",
    "        elif mutant == 'current-to-rand':\n",
    "            r = [current]\n",
    "            r += np.random.choice([n for n in range(self._pop) if n != current], 2 * num + 1, replace=False).tolist()\n",
    "            v = self._x_current[r[0]] \\\n",
    "                + sf * (self._x_current[r[1]] - self._x_current[r[0]]) \\\n",
    "                + sf * np.sum([self._x_current[r[m + 2]] - self._x_current[r[m + 3]] for m in range(num)], axis=0)\n",
    "\n",
    "        # current-to-best\n",
    "        elif mutant == 'current-to-best':\n",
    "            r_best = np.argmin(self._f_current) if self._is_minimize else np.argmax(self._f_current)\n",
    "            r = [r_best, current]\n",
    "            r += np.random.choice([\n",
    "                n for n in range(self._pop) if n not in [r_best, current]], 2 * num, replace=False).tolist()\n",
    "            v = self._x_current[r[0]] \\\n",
    "                + sf * (self._x_current[r[1]] - self._x_current[r[0]]) \\\n",
    "                + sf * np.sum([self._x_current[r[m + 2]] - self._x_current[r[m + 3]] for m in range(num)], axis=0)\n",
    "\n",
    "        else:\n",
    "            raise ValueError('invalid `mutant`: {}'.format(mutant))\n",
    "\n",
    "        return v\n",
    "\n",
    "    def _crossover(self, v, x, cross, cr):\n",
    "        \"\"\"\n",
    "        :param v: mutant vector\n",
    "        :param x: current vector\n",
    "        :param cross: crossover method\n",
    "        :param cr: crossover-rate\n",
    "        :return:\n",
    "        \"\"\"\n",
    "        # crossover\n",
    "        r = np.random.choice(range(self._nd))\n",
    "        u = np.zeros(self._nd)\n",
    "\n",
    "        # binary crossover\n",
    "        if cross == 'bin':\n",
    "            flg = np.equal(r, np.arange(self._nd)) + np.random.rand(self._nd) < cr\n",
    "\n",
    "        # exponential crossover\n",
    "        elif cross == 'exp':\n",
    "            flg = np.array([False for _ in range(self._nd)])\n",
    "            for l in range(self._nd):\n",
    "                flg[r] = True\n",
    "                r = (r + 1) % self._nd\n",
    "                if np.random.rand() >= cr:\n",
    "                    break\n",
    "        else:\n",
    "            raise ValueError('invalid `cross`: {}'.format(cross))\n",
    "\n",
    "        # from mutant vector\n",
    "        u[flg] = v[flg]\n",
    "        # from current vector\n",
    "        u[~flg] = x[~flg]\n",
    "\n",
    "        return u\n",
    "\n",
    "    def _mutation_crossover(self, mutant, num, sf, cross, cr):\n",
    "        l_up = []\n",
    "        # for each individuals\n",
    "        for p in range(self._pop):\n",
    "            # mutation\n",
    "            v_p = self._mutation(p, mutant=mutant, num=num, sf=sf)\n",
    "\n",
    "            # crossover\n",
    "            u_p = self._crossover(v_p, self._x_current[p], cross=cross, cr=cr)\n",
    "            l_up.append(u_p)\n",
    "\n",
    "        return l_up\n",
    "\n",
    "    def optimize_mp(self,\n",
    "                    k_max: int,\n",
    "                    population: int = 5,\n",
    "                    mutant: str = 'best',\n",
    "                    num: int = 1,\n",
    "                    cross: str = 'bin',\n",
    "                    sf: float = 0.7,\n",
    "                    cr: float = 0.3,\n",
    "                    proc: [int, None] = None):\n",
    "        \"\"\"\n",
    "        :param k_max: max-iterations\n",
    "        :param population: number of populations\n",
    "        :param mutant: mutation method ['best', 'rand', 'current-to-best', 'current-to-rand']\n",
    "        :param num: number of mutant vectors\n",
    "        :param cross: crossover method ['bin', 'exp']\n",
    "        :param sf: scaling-factor F\n",
    "        :param cr: crossover-rate CR\n",
    "        :param proc: number of process. if None, then use maximum process\n",
    "        :return:\n",
    "        ex) DE/rand/1/bin --> method='rand', num=1, cross='bin'\n",
    "            DE/best/2/exp --> method='best', num=2, cross='exp'\n",
    "        \"\"\"\n",
    "        # set population\n",
    "        self._pop = population\n",
    "\n",
    "        # initialize\n",
    "        self.initialization()\n",
    "\n",
    "        # get fitness of initial x\n",
    "        with futures.ProcessPoolExecutor(proc) as executor:\n",
    "            results = executor.map(self._evaluate, zip(range(self._pop), self._x_current))\n",
    "   \n",
    "        self._f_current = np.array([r[1] for r in sorted(list(results))])\n",
    "\n",
    "        for k in range(k_max):\n",
    "            # mutation and crossover\n",
    "            l_up = self._mutation_crossover(mutant, num, sf, cross, cr)\n",
    "\n",
    "            # multi-processing\n",
    "            with futures.ProcessPoolExecutor(proc) as executor:\n",
    "                results = executor.map(self._selection, range(self._pop), l_up)\n",
    "\n",
    "            # correct results\n",
    "            _x_current = []\n",
    "            _f_current = []\n",
    "            for _, fp, x in sorted(results):\n",
    "                _x_current.append(x)\n",
    "                _f_current.append(fp)\n",
    "\n",
    "            # update current values\n",
    "            self._x_current = np.r_[_x_current].copy()\n",
    "            self._f_current = np.array(_f_current).copy()\n",
    "\n",
    "            best_score = np.amin(self._f_current) if self._is_minimize else np.amax(self._f_current)\n",
    "            logger.info('k={} best score = {}'.format(k, best_score))\n",
    "            self._orbit.append(best_score)\n",
    "\n",
    "        # get best point\n",
    "        best_idx = np.argmin(self._f_current) if self._is_minimize else np.argmax(self._f_current)\n",
    "        x_best = self._x_current[best_idx]\n",
    "        logger.info('global best score = {}'.format(self._f_current[best_idx]))\n",
    "        logger.info('x_best = {}'.format(x_best))\n",
    "        \n",
    "        return x_best\n",
    "\n",
    "    def optimize(self,\n",
    "                 k_max: int,\n",
    "                 population: int = 20,\n",
    "                 mutant: str = 'best',\n",
    "                 num: int = 1,\n",
    "                 cross: str = 'bin',\n",
    "                 sf: float = 0.7,\n",
    "                 cr: float = 0.3):\n",
    "        \"\"\"\n",
    "        :param k_max: max-iterations\n",
    "        :param population: number of populations\n",
    "        :param mutant: mutation method ['best', 'rand', 'current-to-best', 'current-to-rand']\n",
    "        :param num: number of mutant vectors\n",
    "        :param cross: crossover method ['bin', 'exp']\n",
    "        :param sf: scaling-factor F\n",
    "        :param cr: crossover-rate CR\n",
    "        :return:\n",
    "        ex) DE/rand/1/bin --> method='rand', num=1, cross='bin'\n",
    "            DE/best/2/exp --> method='best', num=2, cross='exp'\n",
    "        \"\"\"\n",
    "        # set population\n",
    "        self._pop = population\n",
    "\n",
    "        # initialize\n",
    "        self.initialization()\n",
    "\n",
    "        # get fitness of initial x\n",
    "        self._f_current = np.array([self._evaluate_with_check(x) for x in self._x_current])\n",
    "\n",
    "        for k in range(k_max):\n",
    "            # mutation and crossover\n",
    "            l_up = self._mutation_crossover(mutant, num, sf, cross, cr)\n",
    "\n",
    "            for p, u_p in enumerate(l_up):\n",
    "                # selection\n",
    "                _, f_p1, x_p1 = self._selection(p, u_p)\n",
    "\n",
    "                # update current values\n",
    "                self._f_current[p] = f_p1\n",
    "                self._x_current[p] = x_p1\n",
    "\n",
    "            best_score = np.amin(self._f_current) if self._is_minimize else np.amax(self._f_current)\n",
    "            logger.info('k={} best score = {}'.format(k, best_score))\n",
    "            self._orbit.append(best_score)\n",
    "\n",
    "        # get best point\n",
    "        best_idx = np.argmin(self._f_current) if self._is_minimize else np.argmax(self._f_current)\n",
    "        x_best = self._x_current[best_idx]\n",
    "        logger.info('global best score = {}'.format(self._f_current[best_idx]))\n",
    "        logger.info('x_best = {}'.format(x_best))\n",
    "        return x_best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ag_data = pd.read_csv('Ag_ordered_dataset.csv',  index_col = 0)\n",
    "shape_set = Ag_data['Shape'].unique()\n",
    "\n",
    "# Use label encoder to transform the label shape\n",
    "le = preprocessing.LabelEncoder()\n",
    "le.fit(shape_set)\n",
    "normalised_shape = le.transform(Ag_data['Shape']) \n",
    "\n",
    "Ag_data['Shape'] = normalised_shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = Ag_data.iloc[:, :79]\n",
    "y = Ag_data['Shape']\n",
    "y = np.array(y)\n",
    "X = np.array(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 ... 8 9 8]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_digits\n",
    "dataset = load_digits()\n",
    "print(dataset.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.7042378673957621\n",
      "INFO:__main__:k=1 best score = 0.7042378673957621\n",
      "INFO:__main__:k=2 best score = 0.7303485987696515\n",
      "INFO:__main__:k=3 best score = 0.7355434039644566\n",
      "INFO:__main__:k=4 best score = 0.746308954203691\n",
      "INFO:__main__:k=5 best score = 0.746308954203691\n",
      "INFO:__main__:k=6 best score = 0.746308954203691\n",
      "INFO:__main__:k=7 best score = 0.746308954203691\n",
      "INFO:__main__:k=8 best score = 0.746308954203691\n",
      "INFO:__main__:k=9 best score = 0.746308954203691\n",
      "INFO:__main__:k=10 best score = 0.746308954203691\n",
      "INFO:__main__:k=11 best score = 0.746308954203691\n",
      "INFO:__main__:k=12 best score = 0.7488038277511962\n",
      "INFO:__main__:k=13 best score = 0.7488038277511962\n",
      "INFO:__main__:k=14 best score = 0.7514354066985647\n",
      "INFO:__main__:k=15 best score = 0.7514354066985647\n",
      "INFO:__main__:k=16 best score = 0.7592617908407382\n",
      "INFO:__main__:k=17 best score = 0.7592617908407382\n",
      "INFO:__main__:k=18 best score = 0.7592617908407382\n",
      "INFO:__main__:k=19 best score = 0.7592617908407382\n",
      "INFO:__main__:k=20 best score = 0.7592617908407382\n",
      "INFO:__main__:k=21 best score = 0.7617908407382091\n",
      "INFO:__main__:k=22 best score = 0.7617908407382091\n",
      "INFO:__main__:k=23 best score = 0.7617908407382091\n",
      "INFO:__main__:k=24 best score = 0.7721804511278195\n",
      "INFO:__main__:k=25 best score = 0.7721804511278195\n",
      "INFO:__main__:k=26 best score = 0.7721804511278195\n",
      "INFO:__main__:k=27 best score = 0.7721804511278195\n",
      "INFO:__main__:k=28 best score = 0.7721804511278195\n",
      "INFO:__main__:k=29 best score = 0.7721804511278195\n",
      "INFO:__main__:k=30 best score = 0.7721804511278195\n",
      "INFO:__main__:k=31 best score = 0.7721804511278195\n",
      "INFO:__main__:k=32 best score = 0.7721804511278195\n",
      "INFO:__main__:k=33 best score = 0.7798359535201641\n",
      "INFO:__main__:k=34 best score = 0.7798359535201641\n",
      "INFO:__main__:k=35 best score = 0.7798359535201641\n",
      "INFO:__main__:k=36 best score = 0.7798359535201641\n",
      "INFO:__main__:k=37 best score = 0.7798359535201641\n",
      "INFO:__main__:k=38 best score = 0.7798359535201641\n",
      "INFO:__main__:k=39 best score = 0.7798359535201641\n",
      "INFO:__main__:k=40 best score = 0.7798359535201641\n",
      "INFO:__main__:k=41 best score = 0.7798359535201641\n",
      "INFO:__main__:k=42 best score = 0.7798359535201641\n",
      "INFO:__main__:k=43 best score = 0.7798359535201641\n",
      "INFO:__main__:k=44 best score = 0.7798359535201641\n",
      "INFO:__main__:k=45 best score = 0.7798359535201641\n",
      "INFO:__main__:k=46 best score = 0.7798359535201641\n",
      "INFO:__main__:k=47 best score = 0.7798359535201641\n",
      "INFO:__main__:k=48 best score = 0.7798359535201641\n",
      "INFO:__main__:k=49 best score = 0.7798359535201641\n",
      "INFO:__main__:global best score = 0.7798359535201641\n",
      "INFO:__main__:x_best = [9.42174455 9.84685532 3.8937028  3.38597637]\n",
      "INFO:__main__:best parameter = {'max_depth': 9, 'min_samples_split': 9, 'min_samples_leaf': 3, 'max_features': None}\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from tempfile import TemporaryDirectory\n",
    "import joblib\n",
    "from pathlib import Path\n",
    "from logging import getLogger, basicConfig\n",
    "\n",
    "logger = getLogger(__name__)\n",
    "\n",
    "\n",
    "class HyperTuner(object):\n",
    "    def __init__(self, model, space: dict, k_fold: int = 5, **params):\n",
    "        \"\"\"\n",
    "        :param model: target model\n",
    "        :param space: search space\n",
    "        :param k_fold: number of folders for K-fold CV\n",
    "        :param params: parameters for optimizer\n",
    "        space = {\n",
    "            'parameter': {'scale': linear', 'range': [0, 1.5]},\n",
    "            'parameter': {'scale': 'log', 'range': [-1, 2]},\n",
    "            'parameter': {'scale': 'category', 'range': ['a', 'b', 'c']},\n",
    "            'parameter': {'scale': 'integer', 'range': [0, 10]},\n",
    "            'parameter': 'static'\n",
    "        }\n",
    "        \"\"\"\n",
    "        self._model = model\n",
    "        assert isinstance(space, dict)\n",
    "        self._space = space\n",
    "        self._parameters = list(self._space.keys())\n",
    "        self._static_params = [p for p in self._parameters if not isinstance(self._space[p], dict)]\n",
    "        self._variable_params = [p for p in self._parameters if isinstance(self._space[p], dict)]\n",
    "        self._tempdir = TemporaryDirectory()\n",
    "        self._tempfile = Path(self._tempdir.name + 'temp_data.gz')\n",
    "        self._eval_function = None\n",
    "        default_opt_param = {'k_max': 50,\n",
    "                             'population': 10,\n",
    "                             'mutant': 'best',\n",
    "                             'num': 1,\n",
    "                             'cross': 'bin',\n",
    "                             'sf': 0.7,\n",
    "                             'cr': 0.4}\n",
    "        self._optimizer_param = default_opt_param\n",
    "        self._optimizer_param.update(params)\n",
    "        self._kf = k_fold\n",
    "\n",
    "    def __del__(self):\n",
    "        self._tempdir.cleanup()\n",
    "\n",
    "    def _get_search_limits(self):\n",
    "        lowers = []\n",
    "        uppers = []\n",
    "        for k in self._variable_params:\n",
    "            if self._space[k]['scale'] in ['linear', 'log']:\n",
    "                lowers.append(self._space[k]['range'][0])\n",
    "                uppers.append(self._space[k]['range'][1])\n",
    "            elif self._space[k]['scale'] == 'integer':\n",
    "                lowers.append(self._space[k]['range'][0])\n",
    "                uppers.append(self._space[k]['range'][1] + 1)\n",
    "            else:\n",
    "                lowers.append(0)\n",
    "                uppers.append(len(self._space[k]['range']))\n",
    "\n",
    "        return np.array(lowers), np.array(uppers)\n",
    "\n",
    "    def _translate_to_origin(self, x):\n",
    "        org_x = {}\n",
    "        for n, k in enumerate(self._variable_params):\n",
    "            if self._space[k]['scale'] == 'log':\n",
    "                org_x[k] = np.power(10, x[n])\n",
    "            elif self._space[k]['scale'] == 'category':\n",
    "                org_x[k] = self._space[k]['range'][int(x[n])]\n",
    "            elif self._space[k]['scale'] == 'integer':\n",
    "                org_x[k] = int(x[n])\n",
    "            else:\n",
    "                org_x[k] = x[n]\n",
    "\n",
    "        # static parameters\n",
    "        for k in self._static_params:\n",
    "            org_x[k] = self._space[k]\n",
    "        return org_x\n",
    "\n",
    "    def _evaluate(self, x):\n",
    "        # load data from temporary directory\n",
    "        input_data, targets = joblib.load(self._tempfile)\n",
    "\n",
    "        # set model using parameter x\n",
    "        param = self._translate_to_origin(x)\n",
    "        model = self._model.set_params(**param)\n",
    "\n",
    "        # train model using CV (K-fold)\n",
    "        skf = KFold(n_splits=self._kf, shuffle=True)\n",
    "        scores = []\n",
    "        for train, test in skf.split(input_data, targets):\n",
    "            x_tr, t_tr = input_data[train], targets[train]\n",
    "            x_te, t_te = input_data[test], targets[test]\n",
    "\n",
    "            model.fit(x_tr, t_tr)\n",
    "            scores.append(self._eval_function(y_pred=model.predict(x_te), y_true=t_te))\n",
    "\n",
    "        # average score\n",
    "        return np.average(scores)\n",
    "\n",
    "    def tuning(self, eval_function: callable, x: np.ndarray, t: np.ndarray, minimize: bool = True):\n",
    "        joblib.dump((x, t), self._tempfile)\n",
    "\n",
    "        # set DE\n",
    "        lower_limit, upper_limit = self._get_search_limits()\n",
    "\n",
    "        # set evaluation function\n",
    "        self._eval_function = eval_function\n",
    "        optimizer = DE(objective_function=self._evaluate, ndim=len(lower_limit), lower_limit=lower_limit,\n",
    "                       upper_limit=upper_limit, minimize=minimize)\n",
    "\n",
    "        x_best = optimizer.optimize_mp(**self._optimizer_param)\n",
    "\n",
    "        return self._translate_to_origin(x_best)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    basicConfig(level='INFO')\n",
    "\n",
    "    from sklearn.datasets import load_digits\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.metrics import accuracy_score\n",
    "\n",
    "    search_space = {\n",
    "        'max_depth': {'scale': 'integer', 'range': [1, 10]},\n",
    "        'min_samples_split': {'scale': 'integer', 'range': [2, 10]},\n",
    "        'min_samples_leaf': {'scale': 'integer', 'range': [1, 10]},\n",
    "        'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}\n",
    "    }\n",
    "\n",
    "    tuner = HyperTuner(model= RandomForestClassifier(random_state =1), space=search_space)\n",
    "    best_param = tuner.tuning(eval_function=accuracy_score, x=X_train, t=y_train, minimize=False)\n",
    "    time_end=time.time()\n",
    "    logger.info('best parameter = {}'.format(best_param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**population: 20, inter: 50**\n",
    "\n",
    "**Search Space:** max_depth: 1~10, \n",
    "min_samples_split: 2~10, min_samples_leaf: 1~10, max_features: auto, sqrt, log2, None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = RandomForestClassifier(max_depth = 12, max_features = None, min_samples_leaf = 2, min_samples_split = 5, random_state = 1)\n",
    "clf.fit(X_train, y_train)\n",
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**RandomizedSearchCV**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "search_space = {'max_depth': [1,2,3,4,5,6,7,8,9,10, 11, 12, 13, 14, 15],\n",
    "                'min_samples_split':[2,3,4,5,6,7,8,9,10],\n",
    "                'min_samples_leaf': [1,2,3,4,5,6,7,8,9,10],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    "\n",
    "time_start=time.time()\n",
    "clf = RandomizedSearchCV(RandomForestClassifier(random_state = 1), search_space, cv = 5, n_iter = 100)\n",
    "clf.fit(X, y)\n",
    "time_end=time.time()\n",
    "\n",
    "print('time cost',time_end-time_start,'s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(clf.best_params_)\n",
    "# print(clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6976744186046512"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier(max_depth = 9, max_features = None, min_samples_leaf = 4, min_samples_split = 6, random_state = 1)\n",
    "clf.fit(X_train, y_train)\n",
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**GridSearchCV**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time cost 563.1987788677216 s\n"
     ]
    }
   ],
   "source": [
    "time_start=time.time()\n",
    "clf = GridSearchCV(RandomForestClassifier(random_state = 1), search_space, cv = 5)\n",
    "clf.fit(X_train, y_train)\n",
    "time_end=time.time()\n",
    "\n",
    "print('time cost',time_end-time_start,'s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 10, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 3}\n"
     ]
    }
   ],
   "source": [
    "print(clf.best_params_)\n",
    "# print(clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7209302325581395"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier(max_depth = 10, max_features = None, min_samples_leaf = 1, min_samples_split = 3, random_state = 1)\n",
    "clf.fit(X_train, y_train)\n",
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "search_space1 = {'max_depth': [1,2],\n",
    "                'min_samples_split':[2,3],\n",
    "                'min_samples_leaf': [1,2],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    "\n",
    "search_space2 = {'max_depth': [1,2,3,4],\n",
    "                'min_samples_split':[2,3,4,5],\n",
    "                'min_samples_leaf': [1,2,3,4],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    "\n",
    "search_space3 = {'max_depth': [1,2,3,4,5,6],\n",
    "                'min_samples_split':[2,3,4,5,6,7],\n",
    "                'min_samples_leaf': [1,2,3,4,5,6],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    "\n",
    "search_space4 = {'max_depth': [1,2,3,4,5,6,7,8],\n",
    "                'min_samples_split':[2,3,4,5,6,7,8,9],\n",
    "                'min_samples_leaf': [1,2,3,4,5,6,7,8],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    " \n",
    "search_space5 = {'max_depth': [1,2,3,4,5,6,7,8,9,10],\n",
    "                'min_samples_split':[2,3,4,5,6,7,8,9,10],\n",
    "                'min_samples_leaf': [1,2,3,4,5,6,7,8,9,10],\n",
    "                'max_features': ('auto', 'sqrt', 'log2', None)}\n",
    "\n",
    "search_spaces = []\n",
    "search_spaces.append(search_space1)\n",
    "search_spaces.append(search_space2)\n",
    "search_spaces.append(search_space3)\n",
    "search_spaces.append(search_space4)\n",
    "#search_spaces.append(search_space5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tests for our SaDE+SearchCV"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parameters: \n",
    "\n",
    "1.\tCriterion: ‘gini’, ‘entropy’\n",
    "2.\tSplitter: ‘best’, ‘random’\n",
    "3.\tMax_features: ‘auto’, ‘sqrt’, ‘log2’\n",
    "4.\tMax_depth: int\n",
    "5.\tMax_samples_split: int or float\n",
    "6.\tMax_samples_leaf: int or float\n",
    "7.\tMax_leaf_nodes: int\n",
    "\n",
    "10 tests for this model. \n",
    "\n",
    "Test cases:\n",
    "\n",
    "Test 1: Max_depth: 1~3, Max_Samples_split: 2~3, Max_samples_leaf: 1~3, Max_leaf_nodes: 1~3\n",
    "\n",
    "Test 2: Max_depth: 1~6, Max_Samples_split: 2~6, Max_samples_leaf: 1~6, Max_leaf_nodes: 1~6\n",
    "\n",
    "Test 3: Max_depth: 1~9, Max_Samples_split: 2~9, Max_samples_leaf: 1~9, Max_leaf_nodes: 1~9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'max_depth': {'scale': 'integer', 'range': [1, 3]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 3]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 3]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 3]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 6]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 6]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 6]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 6]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 9]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 9]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 9]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 9]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 12]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 12]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 12]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 12]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 15]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 15]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 15]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 15]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 18]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 18]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 18]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 18]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 21]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 21]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 21]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 21]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 24]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 24]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 24]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 24]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 27]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 27]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 27]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 27]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}},\n",
       " {'max_depth': {'scale': 'integer', 'range': [1, 30]},\n",
       "  'min_samples_split': {'scale': 'integer', 'range': [2, 30]},\n",
       "  'min_samples_leaf': {'scale': 'integer', 'range': [1, 30]},\n",
       "  'max_leaf_nodes': {'scale': 'integer', 'range': [2, 30]},\n",
       "  'max_features': {'scale': 'category',\n",
       "   'range': ['auto', 'sqrt', 'log2', None]}}]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "search_space1 = {'max_depth': {'scale': 'integer', 'range': [1, 3]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 3]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 3]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 3]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space2 = {'max_depth': {'scale': 'integer', 'range': [1, 6]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 6]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 6]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 6]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space3 = {'max_depth': {'scale': 'integer', 'range': [1, 9]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 9]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 9]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 9]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space4 = {'max_depth': {'scale': 'integer', 'range': [1, 12]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 12]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 12]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 12]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space5 = {'max_depth': {'scale': 'integer', 'range': [1, 15]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 15]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 15]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 15]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space6 = {'max_depth': {'scale': 'integer', 'range': [1, 18]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 18]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 18]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 18]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space7 = {'max_depth': {'scale': 'integer', 'range': [1, 21]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 21]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 21]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 21]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space8 = {'max_depth': {'scale': 'integer', 'range': [1, 24]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 24]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 24]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 24]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space9 = {'max_depth': {'scale': 'integer', 'range': [1, 27]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 27]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 27]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 27]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_space10 = {'max_depth': {'scale': 'integer', 'range': [1, 30]},\n",
    "                'min_samples_split': {'scale': 'integer', 'range': [2, 30]},\n",
    "                'min_samples_leaf': {'scale': 'integer', 'range': [1, 30]},\n",
    "                'max_leaf_nodes':{'scale': 'integer', 'range': [2, 30]},\n",
    "                'max_features': {'scale': 'category', 'range': ['auto', 'sqrt', 'log2', None]}}\n",
    "\n",
    "search_spaces_for_DE = []\n",
    "search_spaces_for_DE.append(search_space1)\n",
    "search_spaces_for_DE.append(search_space2)\n",
    "search_spaces_for_DE.append(search_space3)\n",
    "search_spaces_for_DE.append(search_space4)\n",
    "search_spaces_for_DE.append(search_space5)\n",
    "search_spaces_for_DE.append(search_space6)\n",
    "search_spaces_for_DE.append(search_space7)\n",
    "search_spaces_for_DE.append(search_space8)\n",
    "search_spaces_for_DE.append(search_space9)\n",
    "search_spaces_for_DE.append(search_space10)\n",
    "\n",
    "search_spaces_for_DE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.5261107313738893\n",
      "INFO:__main__:k=1 best score = 0.5261107313738893\n",
      "INFO:__main__:k=2 best score = 0.5261107313738893\n",
      "INFO:__main__:k=3 best score = 0.5261107313738893\n",
      "INFO:__main__:k=4 best score = 0.5261107313738893\n",
      "INFO:__main__:k=5 best score = 0.5261107313738893\n",
      "INFO:__main__:k=6 best score = 0.5261107313738893\n",
      "INFO:__main__:k=7 best score = 0.5261107313738893\n",
      "INFO:__main__:k=8 best score = 0.5261107313738893\n",
      "INFO:__main__:k=9 best score = 0.5261107313738893\n",
      "INFO:__main__:k=10 best score = 0.526179084073821\n",
      "INFO:__main__:k=11 best score = 0.5314764183185237\n",
      "INFO:__main__:k=12 best score = 0.5314764183185237\n",
      "INFO:__main__:k=13 best score = 0.5314764183185237\n",
      "INFO:__main__:k=14 best score = 0.5314764183185237\n",
      "INFO:__main__:k=15 best score = 0.5314764183185237\n",
      "INFO:__main__:k=16 best score = 0.5314764183185237\n",
      "INFO:__main__:k=17 best score = 0.5314764183185237\n",
      "INFO:__main__:k=18 best score = 0.5314764183185237\n",
      "INFO:__main__:k=19 best score = 0.5314764183185237\n",
      "INFO:__main__:k=20 best score = 0.5314764183185237\n",
      "INFO:__main__:k=21 best score = 0.533902939166097\n",
      "INFO:__main__:k=22 best score = 0.533902939166097\n",
      "INFO:__main__:k=23 best score = 0.533902939166097\n",
      "INFO:__main__:k=24 best score = 0.533902939166097\n",
      "INFO:__main__:k=25 best score = 0.533902939166097\n",
      "INFO:__main__:k=26 best score = 0.533902939166097\n",
      "INFO:__main__:k=27 best score = 0.533902939166097\n",
      "INFO:__main__:k=28 best score = 0.533902939166097\n",
      "INFO:__main__:k=29 best score = 0.533902939166097\n",
      "INFO:__main__:k=30 best score = 0.533902939166097\n",
      "INFO:__main__:k=31 best score = 0.533902939166097\n",
      "INFO:__main__:k=32 best score = 0.533902939166097\n",
      "INFO:__main__:k=33 best score = 0.533902939166097\n",
      "INFO:__main__:k=34 best score = 0.533902939166097\n",
      "INFO:__main__:k=35 best score = 0.533902939166097\n",
      "INFO:__main__:k=36 best score = 0.533902939166097\n",
      "INFO:__main__:k=37 best score = 0.533902939166097\n",
      "INFO:__main__:k=38 best score = 0.533902939166097\n",
      "INFO:__main__:k=39 best score = 0.533902939166097\n",
      "INFO:__main__:k=40 best score = 0.533902939166097\n",
      "INFO:__main__:k=41 best score = 0.533902939166097\n",
      "INFO:__main__:k=42 best score = 0.533902939166097\n",
      "INFO:__main__:k=43 best score = 0.533902939166097\n",
      "INFO:__main__:k=44 best score = 0.533902939166097\n",
      "INFO:__main__:k=45 best score = 0.533902939166097\n",
      "INFO:__main__:k=46 best score = 0.533902939166097\n",
      "INFO:__main__:k=47 best score = 0.533902939166097\n",
      "INFO:__main__:k=48 best score = 0.533902939166097\n",
      "INFO:__main__:k=49 best score = 0.533902939166097\n",
      "INFO:__main__:global best score = 0.533902939166097\n",
      "INFO:__main__:x_best = [3.96421004 2.8632895  2.10081912 3.97268003 3.36795664]\n",
      "INFO:__main__:best parameter = {'max_depth': 3, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_leaf_nodes': 3, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6097402597402597\n",
      "INFO:__main__:k=1 best score = 0.6097402597402597\n",
      "INFO:__main__:k=2 best score = 0.6097402597402597\n",
      "INFO:__main__:k=3 best score = 0.6097402597402597\n",
      "INFO:__main__:k=4 best score = 0.6097402597402597\n",
      "INFO:__main__:k=5 best score = 0.6255980861244019\n",
      "INFO:__main__:k=6 best score = 0.6255980861244019\n",
      "INFO:__main__:k=7 best score = 0.6255980861244019\n",
      "INFO:__main__:k=8 best score = 0.6255980861244019\n",
      "INFO:__main__:k=9 best score = 0.6255980861244019\n",
      "INFO:__main__:k=10 best score = 0.6413192071086808\n",
      "INFO:__main__:k=11 best score = 0.6413192071086808\n",
      "INFO:__main__:k=12 best score = 0.6413192071086808\n",
      "INFO:__main__:k=13 best score = 0.6413192071086808\n",
      "INFO:__main__:k=14 best score = 0.6413192071086808\n",
      "INFO:__main__:k=15 best score = 0.6413192071086808\n",
      "INFO:__main__:k=16 best score = 0.6413192071086808\n",
      "INFO:__main__:k=17 best score = 0.6413192071086808\n",
      "INFO:__main__:k=18 best score = 0.6413192071086808\n",
      "INFO:__main__:k=19 best score = 0.6413192071086808\n",
      "INFO:__main__:k=20 best score = 0.6413192071086808\n",
      "INFO:__main__:k=21 best score = 0.6413192071086808\n",
      "INFO:__main__:k=22 best score = 0.6413192071086808\n",
      "INFO:__main__:k=23 best score = 0.6413192071086808\n",
      "INFO:__main__:k=24 best score = 0.6413192071086808\n",
      "INFO:__main__:k=25 best score = 0.6413192071086808\n",
      "INFO:__main__:k=26 best score = 0.6413192071086808\n",
      "INFO:__main__:k=27 best score = 0.6413192071086808\n",
      "INFO:__main__:k=28 best score = 0.6413192071086808\n",
      "INFO:__main__:k=29 best score = 0.6413192071086808\n",
      "INFO:__main__:k=30 best score = 0.6413192071086808\n",
      "INFO:__main__:k=31 best score = 0.6413192071086808\n",
      "INFO:__main__:k=32 best score = 0.6413192071086808\n",
      "INFO:__main__:k=33 best score = 0.6413192071086808\n",
      "INFO:__main__:k=34 best score = 0.6413192071086808\n",
      "INFO:__main__:k=35 best score = 0.6413192071086808\n",
      "INFO:__main__:k=36 best score = 0.6413192071086808\n",
      "INFO:__main__:k=37 best score = 0.6413192071086808\n",
      "INFO:__main__:k=38 best score = 0.6413192071086808\n",
      "INFO:__main__:k=39 best score = 0.6413192071086808\n",
      "INFO:__main__:k=40 best score = 0.6413192071086808\n",
      "INFO:__main__:k=41 best score = 0.6413192071086808\n",
      "INFO:__main__:k=42 best score = 0.6413192071086808\n",
      "INFO:__main__:k=43 best score = 0.6413192071086808\n",
      "INFO:__main__:k=44 best score = 0.6413192071086808\n",
      "INFO:__main__:k=45 best score = 0.6413192071086808\n",
      "INFO:__main__:k=46 best score = 0.6413192071086808\n",
      "INFO:__main__:k=47 best score = 0.6413192071086808\n",
      "INFO:__main__:k=48 best score = 0.6413192071086808\n",
      "INFO:__main__:k=49 best score = 0.6413192071086808\n",
      "INFO:__main__:global best score = 0.6413192071086808\n",
      "INFO:__main__:x_best = [5.9577937  4.97445826 5.60543858 6.30746364 3.12880979]\n",
      "INFO:__main__:best parameter = {'max_depth': 5, 'min_samples_split': 4, 'min_samples_leaf': 5, 'max_leaf_nodes': 6, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.49709501025290503\n",
      "INFO:__main__:k=1 best score = 0.5129186602870813\n",
      "INFO:__main__:k=2 best score = 0.6750170881749828\n",
      "INFO:__main__:k=3 best score = 0.6750170881749828\n",
      "INFO:__main__:k=4 best score = 0.6750170881749828\n",
      "INFO:__main__:k=5 best score = 0.6750170881749828\n",
      "INFO:__main__:k=6 best score = 0.6750170881749828\n",
      "INFO:__main__:k=7 best score = 0.6750170881749828\n",
      "INFO:__main__:k=8 best score = 0.6750170881749828\n",
      "INFO:__main__:k=9 best score = 0.6750170881749828\n",
      "INFO:__main__:k=10 best score = 0.6750170881749828\n",
      "INFO:__main__:k=11 best score = 0.6887218045112782\n",
      "INFO:__main__:k=12 best score = 0.6887218045112782\n",
      "INFO:__main__:k=13 best score = 0.6887218045112782\n",
      "INFO:__main__:k=14 best score = 0.6887218045112782\n",
      "INFO:__main__:k=15 best score = 0.6887218045112782\n",
      "INFO:__main__:k=16 best score = 0.6887218045112782\n",
      "INFO:__main__:k=17 best score = 0.6887218045112782\n",
      "INFO:__main__:k=18 best score = 0.6887218045112782\n",
      "INFO:__main__:k=19 best score = 0.6887218045112782\n",
      "INFO:__main__:k=20 best score = 0.6887218045112782\n",
      "INFO:__main__:k=21 best score = 0.6887218045112782\n",
      "INFO:__main__:k=22 best score = 0.6887218045112782\n",
      "INFO:__main__:k=23 best score = 0.6887218045112782\n",
      "INFO:__main__:k=24 best score = 0.6887218045112782\n",
      "INFO:__main__:k=25 best score = 0.6887218045112782\n",
      "INFO:__main__:k=26 best score = 0.6887218045112782\n",
      "INFO:__main__:k=27 best score = 0.6887218045112782\n",
      "INFO:__main__:k=28 best score = 0.6887218045112782\n",
      "INFO:__main__:k=29 best score = 0.6887218045112782\n",
      "INFO:__main__:k=30 best score = 0.6887218045112782\n",
      "INFO:__main__:k=31 best score = 0.6887218045112782\n",
      "INFO:__main__:k=32 best score = 0.6887218045112782\n",
      "INFO:__main__:k=33 best score = 0.6887218045112782\n",
      "INFO:__main__:k=34 best score = 0.6887218045112782\n",
      "INFO:__main__:k=35 best score = 0.6887218045112782\n",
      "INFO:__main__:k=36 best score = 0.6887218045112782\n",
      "INFO:__main__:k=37 best score = 0.6962747778537253\n",
      "INFO:__main__:k=38 best score = 0.6962747778537253\n",
      "INFO:__main__:k=39 best score = 0.6962747778537253\n",
      "INFO:__main__:k=40 best score = 0.6962747778537253\n",
      "INFO:__main__:k=41 best score = 0.6962747778537253\n",
      "INFO:__main__:k=42 best score = 0.6962747778537253\n",
      "INFO:__main__:k=43 best score = 0.6962747778537253\n",
      "INFO:__main__:k=44 best score = 0.6962747778537253\n",
      "INFO:__main__:k=45 best score = 0.6962747778537253\n",
      "INFO:__main__:k=46 best score = 0.6962747778537253\n",
      "INFO:__main__:k=47 best score = 0.6962747778537253\n",
      "INFO:__main__:k=48 best score = 0.6962747778537253\n",
      "INFO:__main__:k=49 best score = 0.6962747778537253\n",
      "INFO:__main__:global best score = 0.6962747778537253\n",
      "INFO:__main__:x_best = [9.48581983 3.80511192 1.89652584 9.70488092 3.98109033]\n",
      "INFO:__main__:best parameter = {'max_depth': 9, 'min_samples_split': 3, 'min_samples_leaf': 1, 'max_leaf_nodes': 9, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6780246069719753\n",
      "INFO:__main__:k=1 best score = 0.6780246069719753\n",
      "INFO:__main__:k=2 best score = 0.6780246069719753\n",
      "INFO:__main__:k=3 best score = 0.6780246069719753\n",
      "INFO:__main__:k=4 best score = 0.6780246069719753\n",
      "INFO:__main__:k=5 best score = 0.6780246069719753\n",
      "INFO:__main__:k=6 best score = 0.6780246069719753\n",
      "INFO:__main__:k=7 best score = 0.6780246069719753\n",
      "INFO:__main__:k=8 best score = 0.6860218728639782\n",
      "INFO:__main__:k=9 best score = 0.6860218728639782\n",
      "INFO:__main__:k=10 best score = 0.6860218728639782\n",
      "INFO:__main__:k=11 best score = 0.6860218728639782\n",
      "INFO:__main__:k=12 best score = 0.6860218728639782\n",
      "INFO:__main__:k=13 best score = 0.6860218728639782\n",
      "INFO:__main__:k=14 best score = 0.6860218728639782\n",
      "INFO:__main__:k=15 best score = 0.6860218728639782\n",
      "INFO:__main__:k=16 best score = 0.6886876281613123\n",
      "INFO:__main__:k=17 best score = 0.6886876281613123\n",
      "INFO:__main__:k=18 best score = 0.6886876281613123\n",
      "INFO:__main__:k=19 best score = 0.7067327409432673\n",
      "INFO:__main__:k=20 best score = 0.7276144907723855\n",
      "INFO:__main__:k=21 best score = 0.7276144907723855\n",
      "INFO:__main__:k=22 best score = 0.7276144907723855\n",
      "INFO:__main__:k=23 best score = 0.7276144907723855\n",
      "INFO:__main__:k=24 best score = 0.7276144907723855\n",
      "INFO:__main__:k=25 best score = 0.7276144907723855\n",
      "INFO:__main__:k=26 best score = 0.7276144907723855\n",
      "INFO:__main__:k=27 best score = 0.7276144907723855\n",
      "INFO:__main__:k=28 best score = 0.7276144907723855\n",
      "INFO:__main__:k=29 best score = 0.7276144907723855\n",
      "INFO:__main__:k=30 best score = 0.7276144907723855\n",
      "INFO:__main__:k=31 best score = 0.7276144907723855\n",
      "INFO:__main__:k=32 best score = 0.7276144907723855\n",
      "INFO:__main__:k=33 best score = 0.7276144907723855\n",
      "INFO:__main__:k=34 best score = 0.7276144907723855\n",
      "INFO:__main__:k=35 best score = 0.7276144907723855\n",
      "INFO:__main__:k=36 best score = 0.7276144907723855\n",
      "INFO:__main__:k=37 best score = 0.7276144907723855\n",
      "INFO:__main__:k=38 best score = 0.7276144907723855\n",
      "INFO:__main__:k=39 best score = 0.7276144907723855\n",
      "INFO:__main__:k=40 best score = 0.7276144907723855\n",
      "INFO:__main__:k=41 best score = 0.7276144907723855\n",
      "INFO:__main__:k=42 best score = 0.7276144907723855\n",
      "INFO:__main__:k=43 best score = 0.7276144907723855\n",
      "INFO:__main__:k=44 best score = 0.7276144907723855\n",
      "INFO:__main__:k=45 best score = 0.7276144907723855\n",
      "INFO:__main__:k=46 best score = 0.7276144907723855\n",
      "INFO:__main__:k=47 best score = 0.7276144907723855\n",
      "INFO:__main__:k=48 best score = 0.7276144907723855\n",
      "INFO:__main__:k=49 best score = 0.7276144907723855\n",
      "INFO:__main__:global best score = 0.7276144907723855\n",
      "INFO:__main__:x_best = [ 4.87809846  6.10815456  1.17120517 12.09331078  3.81447292]\n",
      "INFO:__main__:best parameter = {'max_depth': 4, 'min_samples_split': 6, 'min_samples_leaf': 1, 'max_leaf_nodes': 12, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6571770334928229\n",
      "INFO:__main__:k=1 best score = 0.6571770334928229\n",
      "INFO:__main__:k=2 best score = 0.6571770334928229\n",
      "INFO:__main__:k=3 best score = 0.6961038961038961\n",
      "INFO:__main__:k=4 best score = 0.6961038961038961\n",
      "INFO:__main__:k=5 best score = 0.6961038961038961\n",
      "INFO:__main__:k=6 best score = 0.6961038961038961\n",
      "INFO:__main__:k=7 best score = 0.6961038961038961\n",
      "INFO:__main__:k=8 best score = 0.6989747095010254\n",
      "INFO:__main__:k=9 best score = 0.6989747095010254\n",
      "INFO:__main__:k=10 best score = 0.6989747095010254\n",
      "INFO:__main__:k=11 best score = 0.7043745727956254\n",
      "INFO:__main__:k=12 best score = 0.7043745727956254\n",
      "INFO:__main__:k=13 best score = 0.7043745727956254\n",
      "INFO:__main__:k=14 best score = 0.7221804511278196\n",
      "INFO:__main__:k=15 best score = 0.7224538619275461\n",
      "INFO:__main__:k=16 best score = 0.7381749829118249\n",
      "INFO:__main__:k=17 best score = 0.7381749829118249\n",
      "INFO:__main__:k=18 best score = 0.7381749829118249\n",
      "INFO:__main__:k=19 best score = 0.7381749829118249\n",
      "INFO:__main__:k=20 best score = 0.7381749829118249\n",
      "INFO:__main__:k=21 best score = 0.7381749829118249\n",
      "INFO:__main__:k=22 best score = 0.7381749829118249\n",
      "INFO:__main__:k=23 best score = 0.7381749829118249\n",
      "INFO:__main__:k=24 best score = 0.7381749829118249\n",
      "INFO:__main__:k=25 best score = 0.7381749829118249\n",
      "INFO:__main__:k=26 best score = 0.7381749829118249\n",
      "INFO:__main__:k=27 best score = 0.7381749829118249\n",
      "INFO:__main__:k=28 best score = 0.7381749829118249\n",
      "INFO:__main__:k=29 best score = 0.7381749829118249\n",
      "INFO:__main__:k=30 best score = 0.7381749829118249\n",
      "INFO:__main__:k=31 best score = 0.7381749829118249\n",
      "INFO:__main__:k=32 best score = 0.7381749829118249\n",
      "INFO:__main__:k=33 best score = 0.7381749829118249\n",
      "INFO:__main__:k=34 best score = 0.7381749829118249\n",
      "INFO:__main__:k=35 best score = 0.7381749829118249\n",
      "INFO:__main__:k=36 best score = 0.7381749829118249\n",
      "INFO:__main__:k=37 best score = 0.7382433356117566\n",
      "INFO:__main__:k=38 best score = 0.7382433356117566\n",
      "INFO:__main__:k=39 best score = 0.7382433356117566\n",
      "INFO:__main__:k=40 best score = 0.7382433356117566\n",
      "INFO:__main__:k=41 best score = 0.740909090909091\n",
      "INFO:__main__:k=42 best score = 0.740909090909091\n",
      "INFO:__main__:k=43 best score = 0.740909090909091\n",
      "INFO:__main__:k=44 best score = 0.740909090909091\n",
      "INFO:__main__:k=45 best score = 0.740909090909091\n",
      "INFO:__main__:k=46 best score = 0.7409432672590567\n",
      "INFO:__main__:k=47 best score = 0.7409432672590567\n",
      "INFO:__main__:k=48 best score = 0.7409432672590567\n",
      "INFO:__main__:k=49 best score = 0.7409432672590567\n",
      "INFO:__main__:global best score = 0.7409432672590567\n",
      "INFO:__main__:x_best = [ 7.53945248  7.84636232  3.29805897 15.75190966  3.18808592]\n",
      "INFO:__main__:best parameter = {'max_depth': 7, 'min_samples_split': 7, 'min_samples_leaf': 3, 'max_leaf_nodes': 15, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6126452494873547\n",
      "INFO:__main__:k=1 best score = 0.6126452494873547\n",
      "INFO:__main__:k=2 best score = 0.6545796308954204\n",
      "INFO:__main__:k=3 best score = 0.6545796308954204\n",
      "INFO:__main__:k=4 best score = 0.6545796308954204\n",
      "INFO:__main__:k=5 best score = 0.6545796308954204\n",
      "INFO:__main__:k=6 best score = 0.6573137388926862\n",
      "INFO:__main__:k=7 best score = 0.665105946684894\n",
      "INFO:__main__:k=8 best score = 0.7092959671907041\n",
      "INFO:__main__:k=9 best score = 0.7277853725222146\n",
      "INFO:__main__:k=10 best score = 0.7277853725222146\n",
      "INFO:__main__:k=11 best score = 0.7277853725222146\n",
      "INFO:__main__:k=12 best score = 0.7277853725222146\n",
      "INFO:__main__:k=13 best score = 0.7277853725222146\n",
      "INFO:__main__:k=14 best score = 0.7277853725222146\n",
      "INFO:__main__:k=15 best score = 0.7277853725222146\n",
      "INFO:__main__:k=16 best score = 0.7277853725222146\n",
      "INFO:__main__:k=17 best score = 0.7277853725222146\n",
      "INFO:__main__:k=18 best score = 0.7305194805194806\n",
      "INFO:__main__:k=19 best score = 0.7386534518113466\n",
      "INFO:__main__:k=20 best score = 0.7386534518113466\n",
      "INFO:__main__:k=21 best score = 0.7386534518113466\n",
      "INFO:__main__:k=22 best score = 0.7410116199589885\n",
      "INFO:__main__:k=23 best score = 0.7433697881066302\n",
      "INFO:__main__:k=24 best score = 0.7433697881066302\n",
      "INFO:__main__:k=25 best score = 0.7433697881066302\n",
      "INFO:__main__:k=26 best score = 0.7433697881066302\n",
      "INFO:__main__:k=27 best score = 0.7433697881066302\n",
      "INFO:__main__:k=28 best score = 0.7433697881066302\n",
      "INFO:__main__:k=29 best score = 0.7433697881066302\n",
      "INFO:__main__:k=30 best score = 0.7433697881066302\n",
      "INFO:__main__:k=31 best score = 0.7433697881066302\n",
      "INFO:__main__:k=32 best score = 0.7433697881066302\n",
      "INFO:__main__:k=33 best score = 0.7433697881066302\n",
      "INFO:__main__:k=34 best score = 0.7433697881066302\n",
      "INFO:__main__:k=35 best score = 0.7433697881066302\n",
      "INFO:__main__:k=36 best score = 0.7433697881066302\n",
      "INFO:__main__:k=37 best score = 0.7435064935064937\n",
      "INFO:__main__:k=38 best score = 0.7435064935064937\n",
      "INFO:__main__:k=39 best score = 0.7435064935064937\n",
      "INFO:__main__:k=40 best score = 0.7435064935064937\n",
      "INFO:__main__:k=41 best score = 0.7435064935064937\n",
      "INFO:__main__:k=42 best score = 0.7435064935064937\n",
      "INFO:__main__:k=43 best score = 0.7435064935064937\n",
      "INFO:__main__:k=44 best score = 0.7486671223513329\n",
      "INFO:__main__:k=45 best score = 0.7486671223513329\n",
      "INFO:__main__:k=46 best score = 0.7486671223513329\n",
      "INFO:__main__:k=47 best score = 0.7486671223513329\n",
      "INFO:__main__:k=48 best score = 0.7486671223513329\n",
      "INFO:__main__:k=49 best score = 0.7486671223513329\n",
      "INFO:__main__:global best score = 0.7486671223513329\n",
      "INFO:__main__:x_best = [15.08214046  5.69166844  4.28284123 18.5316756   3.26827444]\n",
      "INFO:__main__:best parameter = {'max_depth': 15, 'min_samples_split': 5, 'min_samples_leaf': 4, 'max_leaf_nodes': 18, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6646274777853726\n",
      "INFO:__main__:k=1 best score = 0.7014354066985645\n",
      "INFO:__main__:k=2 best score = 0.7014354066985645\n",
      "INFO:__main__:k=3 best score = 0.7014354066985645\n",
      "INFO:__main__:k=4 best score = 0.7014354066985645\n",
      "INFO:__main__:k=5 best score = 0.7015037593984963\n",
      "INFO:__main__:k=6 best score = 0.7015037593984963\n",
      "INFO:__main__:k=7 best score = 0.7015037593984963\n",
      "INFO:__main__:k=8 best score = 0.7096719070403281\n",
      "INFO:__main__:k=9 best score = 0.7096719070403281\n",
      "INFO:__main__:k=10 best score = 0.7096719070403281\n",
      "INFO:__main__:k=11 best score = 0.7304169514695831\n",
      "INFO:__main__:k=12 best score = 0.7304169514695831\n",
      "INFO:__main__:k=13 best score = 0.7304169514695831\n",
      "INFO:__main__:k=14 best score = 0.7304169514695831\n",
      "INFO:__main__:k=15 best score = 0.7514012303485987\n",
      "INFO:__main__:k=16 best score = 0.7514012303485987\n",
      "INFO:__main__:k=17 best score = 0.7514012303485987\n",
      "INFO:__main__:k=18 best score = 0.7514012303485987\n",
      "INFO:__main__:k=19 best score = 0.7644907723855093\n",
      "INFO:__main__:k=20 best score = 0.7644907723855093\n",
      "INFO:__main__:k=21 best score = 0.7644907723855093\n",
      "INFO:__main__:k=22 best score = 0.7644907723855093\n",
      "INFO:__main__:k=23 best score = 0.7644907723855093\n",
      "INFO:__main__:k=24 best score = 0.7644907723855093\n",
      "INFO:__main__:k=25 best score = 0.7644907723855093\n",
      "INFO:__main__:k=26 best score = 0.7644907723855093\n",
      "INFO:__main__:k=27 best score = 0.7644907723855093\n",
      "INFO:__main__:k=28 best score = 0.7644907723855093\n",
      "INFO:__main__:k=29 best score = 0.7644907723855093\n",
      "INFO:__main__:k=30 best score = 0.7644907723855093\n",
      "INFO:__main__:k=31 best score = 0.7644907723855093\n",
      "INFO:__main__:k=32 best score = 0.7644907723855093\n",
      "INFO:__main__:k=33 best score = 0.7644907723855093\n",
      "INFO:__main__:k=34 best score = 0.7644907723855093\n",
      "INFO:__main__:k=35 best score = 0.7644907723855093\n",
      "INFO:__main__:k=36 best score = 0.7644907723855093\n",
      "INFO:__main__:k=37 best score = 0.7644907723855093\n",
      "INFO:__main__:k=38 best score = 0.7644907723855093\n",
      "INFO:__main__:k=39 best score = 0.7644907723855093\n",
      "INFO:__main__:k=40 best score = 0.7644907723855093\n",
      "INFO:__main__:k=41 best score = 0.7644907723855093\n",
      "INFO:__main__:k=42 best score = 0.7644907723855093\n",
      "INFO:__main__:k=43 best score = 0.7750170881749829\n",
      "INFO:__main__:k=44 best score = 0.7750170881749829\n",
      "INFO:__main__:k=45 best score = 0.7750170881749829\n",
      "INFO:__main__:k=46 best score = 0.7750170881749829\n",
      "INFO:__main__:k=47 best score = 0.7750170881749829\n",
      "INFO:__main__:k=48 best score = 0.7750170881749829\n",
      "INFO:__main__:k=49 best score = 0.7750170881749829\n",
      "INFO:__main__:global best score = 0.7750170881749829\n",
      "INFO:__main__:x_best = [17.36385697 10.76967948  4.11423957 20.05488364  3.40533574]\n",
      "INFO:__main__:best parameter = {'max_depth': 17, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_leaf_nodes': 20, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6833561175666438\n",
      "INFO:__main__:k=1 best score = 0.6833561175666438\n",
      "INFO:__main__:k=2 best score = 0.6988380041011618\n",
      "INFO:__main__:k=3 best score = 0.6988380041011618\n",
      "INFO:__main__:k=4 best score = 0.6988380041011618\n",
      "INFO:__main__:k=5 best score = 0.7253246753246753\n",
      "INFO:__main__:k=6 best score = 0.7253246753246753\n",
      "INFO:__main__:k=7 best score = 0.7330827067669173\n",
      "INFO:__main__:k=8 best score = 0.7330827067669173\n",
      "INFO:__main__:k=9 best score = 0.7330827067669173\n",
      "INFO:__main__:k=10 best score = 0.7330827067669173\n",
      "INFO:__main__:k=11 best score = 0.7330827067669173\n",
      "INFO:__main__:k=12 best score = 0.7383458646616542\n",
      "INFO:__main__:k=13 best score = 0.74107997265892\n",
      "INFO:__main__:k=14 best score = 0.74107997265892\n",
      "INFO:__main__:k=15 best score = 0.74107997265892\n",
      "INFO:__main__:k=16 best score = 0.74107997265892\n",
      "INFO:__main__:k=17 best score = 0.74107997265892\n",
      "INFO:__main__:k=18 best score = 0.74107997265892\n",
      "INFO:__main__:k=19 best score = 0.74107997265892\n",
      "INFO:__main__:k=20 best score = 0.74107997265892\n",
      "INFO:__main__:k=21 best score = 0.74107997265892\n",
      "INFO:__main__:k=22 best score = 0.7592617908407382\n",
      "INFO:__main__:k=23 best score = 0.7592617908407382\n",
      "INFO:__main__:k=24 best score = 0.7592617908407382\n",
      "INFO:__main__:k=25 best score = 0.7592617908407382\n",
      "INFO:__main__:k=26 best score = 0.7592617908407382\n",
      "INFO:__main__:k=27 best score = 0.7592617908407382\n",
      "INFO:__main__:k=28 best score = 0.7592617908407382\n",
      "INFO:__main__:k=29 best score = 0.7592617908407382\n",
      "INFO:__main__:k=30 best score = 0.7592617908407382\n",
      "INFO:__main__:k=31 best score = 0.7592617908407382\n",
      "INFO:__main__:k=32 best score = 0.7592617908407382\n",
      "INFO:__main__:k=33 best score = 0.7592617908407382\n",
      "INFO:__main__:k=34 best score = 0.7592617908407382\n",
      "INFO:__main__:k=35 best score = 0.7669172932330828\n",
      "INFO:__main__:k=36 best score = 0.7669172932330828\n",
      "INFO:__main__:k=37 best score = 0.7669172932330828\n",
      "INFO:__main__:k=38 best score = 0.7669172932330828\n",
      "INFO:__main__:k=39 best score = 0.7669172932330828\n",
      "INFO:__main__:k=40 best score = 0.7669172932330828\n",
      "INFO:__main__:k=41 best score = 0.7669172932330828\n",
      "INFO:__main__:k=42 best score = 0.7669172932330828\n",
      "INFO:__main__:k=43 best score = 0.7669172932330828\n",
      "INFO:__main__:k=44 best score = 0.7669172932330828\n",
      "INFO:__main__:k=45 best score = 0.7669172932330828\n",
      "INFO:__main__:k=46 best score = 0.7669172932330828\n",
      "INFO:__main__:k=47 best score = 0.7669172932330828\n",
      "INFO:__main__:k=48 best score = 0.7669172932330828\n",
      "INFO:__main__:k=49 best score = 0.7669172932330828\n",
      "INFO:__main__:global best score = 0.7669172932330828\n",
      "INFO:__main__:x_best = [20.57071681  8.8833264   3.08171891 18.50016953  3.24994588]\n",
      "INFO:__main__:best parameter = {'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 3, 'max_leaf_nodes': 18, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6672932330827066\n",
      "INFO:__main__:k=1 best score = 0.6672932330827066\n",
      "INFO:__main__:k=2 best score = 0.7408065618591934\n",
      "INFO:__main__:k=3 best score = 0.7408065618591934\n",
      "INFO:__main__:k=4 best score = 0.7408065618591934\n",
      "INFO:__main__:k=5 best score = 0.7408065618591934\n",
      "INFO:__main__:k=6 best score = 0.7431647300068353\n",
      "INFO:__main__:k=7 best score = 0.7431647300068353\n",
      "INFO:__main__:k=8 best score = 0.7431647300068353\n",
      "INFO:__main__:k=9 best score = 0.7436431989063569\n",
      "INFO:__main__:k=10 best score = 0.7436431989063569\n",
      "INFO:__main__:k=11 best score = 0.7436431989063569\n",
      "INFO:__main__:k=12 best score = 0.7436431989063569\n",
      "INFO:__main__:k=13 best score = 0.7436431989063569\n",
      "INFO:__main__:k=14 best score = 0.7436431989063569\n",
      "INFO:__main__:k=15 best score = 0.7458304853041695\n",
      "INFO:__main__:k=16 best score = 0.7458304853041695\n",
      "INFO:__main__:k=17 best score = 0.7458304853041695\n",
      "INFO:__main__:k=18 best score = 0.7566985645933014\n",
      "INFO:__main__:k=19 best score = 0.7566985645933014\n",
      "INFO:__main__:k=20 best score = 0.7566985645933014\n",
      "INFO:__main__:k=21 best score = 0.7566985645933014\n",
      "INFO:__main__:k=22 best score = 0.7566985645933014\n",
      "INFO:__main__:k=23 best score = 0.7566985645933014\n",
      "INFO:__main__:k=24 best score = 0.7566985645933014\n",
      "INFO:__main__:k=25 best score = 0.7566985645933014\n",
      "INFO:__main__:k=26 best score = 0.7566985645933014\n",
      "INFO:__main__:k=27 best score = 0.7566985645933014\n",
      "INFO:__main__:k=28 best score = 0.7566985645933014\n",
      "INFO:__main__:k=29 best score = 0.7566985645933014\n",
      "INFO:__main__:k=30 best score = 0.7566985645933014\n",
      "INFO:__main__:k=31 best score = 0.7566985645933014\n",
      "INFO:__main__:k=32 best score = 0.7566985645933014\n",
      "INFO:__main__:k=33 best score = 0.7566985645933014\n",
      "INFO:__main__:k=34 best score = 0.7566985645933014\n",
      "INFO:__main__:k=35 best score = 0.7566985645933014\n",
      "INFO:__main__:k=36 best score = 0.7566985645933014\n",
      "INFO:__main__:k=37 best score = 0.7566985645933014\n",
      "INFO:__main__:k=38 best score = 0.7566985645933014\n",
      "INFO:__main__:k=39 best score = 0.7566985645933014\n",
      "INFO:__main__:k=40 best score = 0.7566985645933014\n",
      "INFO:__main__:k=41 best score = 0.7566985645933014\n",
      "INFO:__main__:k=42 best score = 0.7566985645933014\n",
      "INFO:__main__:k=43 best score = 0.7566985645933014\n",
      "INFO:__main__:k=44 best score = 0.7566985645933014\n",
      "INFO:__main__:k=45 best score = 0.7566985645933014\n",
      "INFO:__main__:k=46 best score = 0.7566985645933014\n",
      "INFO:__main__:k=47 best score = 0.7566985645933014\n",
      "INFO:__main__:k=48 best score = 0.7618591934381408\n",
      "INFO:__main__:k=49 best score = 0.7618591934381408\n",
      "INFO:__main__:global best score = 0.7618591934381408\n",
      "INFO:__main__:x_best = [12.6540914   5.63992798  2.95029564 21.94875408  3.89799456]\n",
      "INFO:__main__:best parameter = {'max_depth': 12, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_leaf_nodes': 21, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:__main__:k=0 best score = 0.6859193438140807\n",
      "INFO:__main__:k=1 best score = 0.6860218728639782\n",
      "INFO:__main__:k=2 best score = 0.6860218728639782\n",
      "INFO:__main__:k=3 best score = 0.6860218728639782\n",
      "INFO:__main__:k=4 best score = 0.7354408749145591\n",
      "INFO:__main__:k=5 best score = 0.7354408749145591\n",
      "INFO:__main__:k=6 best score = 0.7354408749145591\n",
      "INFO:__main__:k=7 best score = 0.7354408749145591\n",
      "INFO:__main__:k=8 best score = 0.7354408749145591\n",
      "INFO:__main__:k=9 best score = 0.7354408749145591\n",
      "INFO:__main__:k=10 best score = 0.7354408749145591\n",
      "INFO:__main__:k=11 best score = 0.7354408749145591\n",
      "INFO:__main__:k=12 best score = 0.7354408749145591\n",
      "INFO:__main__:k=13 best score = 0.7487354750512646\n",
      "INFO:__main__:k=14 best score = 0.7487354750512646\n",
      "INFO:__main__:k=15 best score = 0.7618591934381408\n",
      "INFO:__main__:k=16 best score = 0.7618591934381408\n",
      "INFO:__main__:k=17 best score = 0.7618591934381408\n",
      "INFO:__main__:k=18 best score = 0.7618591934381408\n",
      "INFO:__main__:k=19 best score = 0.7618591934381408\n",
      "INFO:__main__:k=20 best score = 0.7618591934381408\n",
      "INFO:__main__:k=21 best score = 0.7618591934381408\n",
      "INFO:__main__:k=22 best score = 0.7618591934381408\n",
      "INFO:__main__:k=23 best score = 0.7618591934381408\n",
      "INFO:__main__:k=24 best score = 0.7618591934381408\n",
      "INFO:__main__:k=25 best score = 0.7618591934381408\n",
      "INFO:__main__:k=26 best score = 0.7618591934381408\n",
      "INFO:__main__:k=27 best score = 0.7618591934381408\n",
      "INFO:__main__:k=28 best score = 0.7618591934381408\n",
      "INFO:__main__:k=29 best score = 0.7618591934381408\n",
      "INFO:__main__:k=30 best score = 0.7618591934381408\n",
      "INFO:__main__:k=31 best score = 0.7618591934381408\n",
      "INFO:__main__:k=32 best score = 0.7618591934381408\n",
      "INFO:__main__:k=33 best score = 0.7618591934381408\n",
      "INFO:__main__:k=34 best score = 0.7618591934381408\n",
      "INFO:__main__:k=35 best score = 0.7618591934381408\n",
      "INFO:__main__:k=36 best score = 0.7618591934381408\n",
      "INFO:__main__:k=37 best score = 0.7618591934381408\n",
      "INFO:__main__:k=38 best score = 0.7618591934381408\n",
      "INFO:__main__:k=39 best score = 0.7618591934381408\n",
      "INFO:__main__:k=40 best score = 0.7618591934381408\n",
      "INFO:__main__:k=41 best score = 0.7618591934381408\n",
      "INFO:__main__:k=42 best score = 0.7618591934381408\n",
      "INFO:__main__:k=43 best score = 0.7823308270676692\n",
      "INFO:__main__:k=44 best score = 0.7823308270676692\n",
      "INFO:__main__:k=45 best score = 0.7823308270676692\n",
      "INFO:__main__:k=46 best score = 0.7823308270676692\n",
      "INFO:__main__:k=47 best score = 0.7823308270676692\n",
      "INFO:__main__:k=48 best score = 0.7823308270676692\n",
      "INFO:__main__:k=49 best score = 0.7823308270676692\n",
      "INFO:__main__:global best score = 0.7823308270676692\n",
      "INFO:__main__:x_best = [10.98629674  4.58154946  3.47910935 30.98559679  3.0122043 ]\n",
      "INFO:__main__:best parameter = {'max_depth': 10, 'min_samples_split': 4, 'min_samples_leaf': 3, 'max_leaf_nodes': 30, 'max_features': None}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "[13.927955150604248, 17.42077612876892, 17.16262412071228, 17.09074902534485, 18.08102297782898, 17.651416063308716, 21.499034881591797, 20.995457887649536, 18.162853956222534, 21.005765676498413]\n"
     ]
    }
   ],
   "source": [
    "Grid_times = []\n",
    "Random_times = []\n",
    "DE_times = []\n",
    "\n",
    "Grid_paras = []\n",
    "Random_paras = []\n",
    "DE_paras = []\n",
    "\n",
    "DE_scores = []\n",
    "\n",
    "for i in range(len(search_spaces_for_DE)):\n",
    "    # Grid Search \n",
    "#     time_start=time.time()\n",
    "#     clf = GridSearchCV(RandomForestClassifier(random_state = 1), search_spaces[i], cv = 5)\n",
    "#     clf.fit(X_train, y_train)\n",
    "#     time_end=time.time()\n",
    "#     Grid_times.append(time_end-time_start)\n",
    "    \n",
    "    # Add paras\n",
    "#     Grid_paras.append(clf.best_params_)\n",
    "    \n",
    "    # Randomised Search\n",
    "#     time_start=time.time()\n",
    "#     clf = RandomizedSearchCV(RandomForestClassifier(random_state = 1), search_spaces[i], cv = 5, n_iter = 100)\n",
    "#     clf.fit(X_train, y_train)\n",
    "#     time_end=time.time()\n",
    "#     Random_times.append(time_end-time_start)\n",
    "    \n",
    "    # Add paras\n",
    "#     Random_paras.append(clf.best_params_)\n",
    "    \n",
    "    # DE\n",
    "    tuner = HyperTuner(model= RandomForestClassifier(random_state =1), space=search_spaces_for_DE[i])\n",
    "    time_start=time.time()\n",
    "    best_param = tuner.tuning(eval_function=accuracy_score, x=X_train, t=y_train, minimize=False)\n",
    "    time_end=time.time()\n",
    "    DE_times.append(time_end-time_start)\n",
    "    logger.info('best parameter = {}'.format(best_param))\n",
    "    \n",
    "    paras = list(best_param.values())\n",
    "    \n",
    "    \n",
    "    # Add paras\n",
    "    DE_paras.append(best_param)\n",
    "    # Add accuracies\n",
    "    clf = RandomForestClassifier(max_depth = paras[0], max_leaf_nodes = paras[3], max_features = paras[4], min_samples_leaf = paras[2], min_samples_split = paras[1], random_state = 1) \n",
    "    clf.fit(X_train, y_train)\n",
    "    DE_scores.append(clf.score(X_test, y_test))\n",
    "    \n",
    "    print(i)\n",
    "\n",
    "# print(Grid_times)\n",
    "# print(Random_times)\n",
    "print(DE_times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.3488372093023256, 0.5581395348837209, 0.5348837209302325, 0.6046511627906976, 0.627906976744186, 0.6744186046511628, 0.6976744186046512, 0.6744186046511628, 0.6744186046511628, 0.6976744186046512]\n"
     ]
    }
   ],
   "source": [
    "print(DE_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plt.plot(Grid_times, label = 'GridSearchCV')\n",
    "# plt.plot(Random_times, label = 'RandomisedSearchCV')\n",
    "plt.plot(DE_times, label = 'SaDE++')\n",
    "plt.legend(loc = [1, 0])\n",
    "plt.xticks(range(0, 4))\n",
    "plt.xlabel('Search Space')\n",
    "plt.ylabel('Time consumption (s)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'max_depth': 2, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2}, {'max_depth': 4, 'max_features': None, 'min_samples_leaf': 3, 'min_samples_split': 2}, {'max_depth': 6, 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 2}, {'max_depth': 8, 'max_features': None, 'min_samples_leaf': 3, 'min_samples_split': 7}]\n",
      "[{'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'max_depth': 2}, {'min_samples_split': 5, 'min_samples_leaf': 3, 'max_features': None, 'max_depth': 4}, {'min_samples_split': 2, 'min_samples_leaf': 3, 'max_features': None, 'max_depth': 6}, {'min_samples_split': 9, 'min_samples_leaf': 1, 'max_features': None, 'max_depth': 7}]\n",
      "[{'max_depth': 2, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None}, {'max_depth': 4, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_features': None}, {'max_depth': 6, 'min_samples_split': 3, 'min_samples_leaf': 3, 'max_features': None}, {'max_depth': 7, 'min_samples_split': 5, 'min_samples_leaf': 1, 'max_features': None}]\n"
     ]
    }
   ],
   "source": [
    "print(Grid_paras)\n",
    "print(Random_paras)\n",
    "print(DE_paras)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, None, 1, 2]\n",
      "[2, 1, None, 2]\n",
      "[2, 2, 1, None]\n",
      "[4, None, 3, 2]\n",
      "[5, 3, None, 4]\n",
      "[4, 5, 2, None]\n",
      "[6, None, 2, 2]\n",
      "[2, 3, None, 6]\n",
      "[6, 3, 3, None]\n",
      "[8, None, 3, 7]\n",
      "[9, 1, None, 7]\n",
      "[7, 5, 1, None]\n"
     ]
    }
   ],
   "source": [
    "Grid_scores = []\n",
    "Random_scores = [] \n",
    "DE_scores = []\n",
    "\n",
    "for i in range(len(Grid_paras)):\n",
    "    paras = list(Grid_paras[i].values())\n",
    "    print(paras)\n",
    "    clf = RandomForestClassifier(max_depth = paras[0], max_features = paras[1], min_samples_leaf = paras[2], min_samples_split = paras[3], random_state = 1) \n",
    "    clf.fit(X_train, y_train)\n",
    "    Grid_scores.append(clf.score(X_test, y_test))\n",
    "    \n",
    "    paras = list(Random_paras[i].values())\n",
    "    print(paras)\n",
    "    clf = RandomForestClassifier(max_depth = paras[3], max_features = paras[2], min_samples_leaf = paras[1], min_samples_split = paras[0], random_state = 1) \n",
    "    clf.fit(X_train, y_train)\n",
    "    Random_scores.append(clf.score(X_test, y_test))\n",
    "    \n",
    "    paras = list(DE_paras[i].values())\n",
    "    print(paras)\n",
    "    clf = RandomForestClassifier(max_depth = paras[0], max_features = paras[3], min_samples_leaf = paras[2], min_samples_split = paras[1], random_state = 1) \n",
    "    clf.fit(X_train, y_train)\n",
    "    DE_scores.append(clf.score(X_test, y_test))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a248aa0f0>]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Grid_scores, label = 'GridSearchCV')\n",
    "plt.plot(Random_scores, label = 'RandomisedSearchCV')\n",
    "plt.plot(DE_scores, label = 'SaDE++')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
